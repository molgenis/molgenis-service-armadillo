version: "3.4"
services:
  # activate MinIO by adding --profile minio (e.g.: `docker-compose --profile minio up`)
  minio:
    image: minio/minio:RELEASE.2022-02-26T02-54-46Z
    ports:
      - 9000:9000
    environment:
      MINIO_ROOT_USER: molgenis
      MINIO_ROOT_PASSWORD: molgenis
      MINIO_IDENTITY_OPENID_CLIENT_ID: 'b396233b-cdb2-449e-ac5c-a0d28b38f791'
      MINIO_IDENTITY_OPENID_CONFIG_URL: 'https://auth.molgenis.org/.well-known/openid-configuration'
      MINIO_BROWSER: 'off'
    command: server /data
    # volumes:
    #   - ./data/:/data
    profiles: ['minio']

  console:
    image: minio/console:v0.21.2
    ports:
      - 9090:9090
    environment:
      CONSOLE_PBKDF_PASSPHRASE: '3298yhrtequhfqeiopunvdasl'
      CONSOLE_PBKDF_SALT: 'dfs98q8hg4n9npqfeiqfne'
      CONSOLE_MINIO_SERVER: 'http://minio:9000'
    # CONSOLE_IDP_URL: 'https://auth.molgenis.org/.well-known/openid-configuration'
    # CONSOLE_IDP_CLIENT_ID: 'b396233b-cdb2-449e-ac5c-a0d28b38f791'
    # CONSOLE_IDP_SECRET: 'xxxxxxxxxxxxxxxxx'
    # CONSOLE_IDP_CALLBACK: 'http://localhost:9090/oauth_callback'
    command: server
    profiles: ['minio']

  # activate this profile by adding --profile armadillo to the `docker-compose --profile armadillo up`
  armadillo:
    image: molgenis/armadillo:latest
    environment:
      SPRING_PROFILES_ACTIVE: development,docker-compose
      MINIO_URL: http://minio
      MINIO_ACCESS_KEY: molgenis
      MINIO_SECRET_KEY: molgenis
      RSERVE_HOST: rserver
      LOGGING_CONFIG: 'classpath:logback-file.xml'
      AUDIT_LOG_PATH: '/app/logs/audit.log'
    #  SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: 'https://auth.molgenis.org'
    #  SPRING_SECURITY_OAUTH2_RESOURCESERVER_OPAQUETOKEN_CLIENT_ID: 'b396233b-cdb2-449e-ac5c-a0d28b38f791'
    ports:
      - 8080:8080
    volumes:
      - ${PWD}/logs/:/app/logs
    profiles: ['armadillo']

  rserver:
    # to build your own rserver image please check: https://github.com/datashield/docker-armadillo-rserver-base
    image: datashield/armadillo-rserver:6.2.0
    environment:
      DEBUG: "FALSE"
    ports:
      # host port: container port
      - 6311:6311

  # activate this profile by adding --profile exposome to the `docker-compose --profile armadillo --profile exposome up`
  rserver-exposome:
    image: brgelab/armadillo-rserver-exposome:2
    environment:
      DEBUG: "FALSE"
    ports:
      - 6312:6311
    profiles: [ "exposome" ]

  # activate this profile by adding --profile omics to the `docker-compose --profile armadillo --profile omics up`
  rserver-omics:
    image: brgelab/armadillo-rserver-omics:1
    environment:
      DEBUG: "FALSE"
    ports:
      - 6313:6311
    profiles: [ "omics" ]

  auth:
    # Use predefined production image:
    # You need to activate SPRING_SECURITY_OAUTH2_JWT_ISSUER_URL and SPRING_SECURITY_OAUTH2_OPAQUETOKEN_CLIENT_ID in the armadillo to make the OIDC flow work
    # Drop the SPRING_PROFILES_ACTIVE property
    image: molgenis/molgenis-auth:latest
    environment:
      ISSUER_BASE_URL: 'https://auth.molgenis.org'
      CLIENT_ID: 'b396233b-cdb2-449e-ac5c-a0d28b38f791'
      CLIENT_SECRET: 'xxxxxxx-xxxxxxx-xxxxxxx'
      FUSION_API_TOKEN: 'xxxxxxx-xxxxxxx-xxxxxxx'
      BASE_URL: 'http://localhost:4000'
      APP_SESSION_SECRET: "generate-with-uuid"
    ports:
      - 4000:4000
    profiles: [ "oidc" ]
