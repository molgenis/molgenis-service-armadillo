{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>.</p> <p></p> MOLGENIS Armadillo <p>A simple, user-friendly, open source solution for implementing federated analysis. Armadillo is a data portal that allows data stewards to share datasets on a server, and researchers to analyse these data and those shared on other servers using the DataSHIELD analysis tools.</p> <p>Why is it called Armadillo? - The word Armadillo is Spanish and means \"little armored one\". MOLGENIS Armadillo is a compact solution that implements  the DataSHIELD infrastructure.</p>"},{"location":"pages/about_us/","title":"About us","text":"<p>Armadillo is part of the MOLGENIS community. We are an  enthusiastic group of datamanagers, systemoperator and developers. We have a large  number of national and international partners and value research, data-sharing, collaboration and open source software. </p> <p>We are also involved in the DataSHIELD community. This community is very passionate when it comes to federated analyses and sharing data securely. They are very welcoming to anyone willing to participate. </p>"},{"location":"pages/advanced_usage/","title":"Advanced Usage","text":"<p>API usage</p> <p>monitoring</p> <p>Logs </p>"},{"location":"pages/basic_concepts/","title":"Basic concepts","text":"<p>DataSHIELD is an R-based software solution for federated analysis - the remote analysis of multiple data sources. It allows for sophisticated analyses without the user being able to view or copy individual level data. Instead, only non-disclosive summary statistics are returned. This makes it an effective solution for secure data science collaborations.</p> <p>In order to use DataSHIELD, additional software is required to store data and manage user interaction. There are currently two solutions for doing this: Armadillo and Opal, which can be used compatibly within the same network. Below is an example of a simple setup:</p>"},{"location":"pages/basic_concepts/#example-setup-1","title":"Example setup 1","text":"<p>A user writes analysis commands in R, using client-side DataSHIELD R packages. The commands are sent to the biobank  servers. For Armadillo, the communication between the client and the server is handled by the R packages DSI and DSMolgenisArmadillo, whilst the data storage and execution of commands on the server is handled by ArmadilloService. The non-disclosive summary statistics are then returned to the user.  </p>"},{"location":"pages/basic_concepts/#example-setup-2","title":"Example setup 2","text":"<p>An alternative setup involves the user first connecting to a Central Analysis Server (CAS), which is an online R studio environment:</p> <p></p> <p>Once logged in to the CAS, users write their code as if they were running RStudio locally. The advantage of this setup is that Biobank servers can be configured so that they are blocked off from the rest of the internet by a firewall and can only be accessed from the CAS. This provices an additional layer of data protection. It also benefits users, as all required DataSHIELD R packages can be pre-installed thus removing the needs for users to set up their R environment.</p>"},{"location":"pages/basic_concepts/#resources","title":"Resources","text":"<p>An additional optional feature of DataSHIELD is the ability to host files elsewhere (e.g. computer clusters) and link them to the data of armadillo or opal servers. This is impletmented using the resourcer package. External resources can be used alongside data stored in armadillo itself, and resources may be hosted in different locations and formats.</p>"},{"location":"pages/basic_concepts/#datashield-packages-and-their-use","title":"DataSHIELD packages and their use","text":"<p>Finally, here is a brief summary of the core Armadillo and DataSHIELD packages described in this documentation.</p> Name Type of application User type Description Sources armadilloService  Java - The software that facilitates hosting and analysing data using DataSHIELD. DSI  R package - This package defines the API that is to be implemented by DataSHIELD compliant data repositories. DSMolgenisArmadillo  R package Researchers To communicate between the client-side packages and armadilloService to perform analysis. MolgenisArmadillo  R package Datamanager To upload data and manage projects in Armadillo in R. User Interface  Javascript/ VueJS Datamanager To manage users, data, configurations and view logs. dsUpload  R package Datamanager To upload data according to a specific format into Armadillo/Opal using R. dsBaseClient  R package Researchers Core DataSHIELD client-side R package required for executing basic DataSHIELD commands. dsTidyverseClient  R package Researchers Client-side R package which implements efficient data-manipulation using selected Tidyverse functions."},{"location":"pages/contact/","title":"Contact","text":"<p>MOLGENIS Support (support@molgenis.org).</p>"},{"location":"pages/dev_guides/","title":"Developer Guidelines","text":"<p>The Armadillo and DataSHIELD community both are very welcoming to anyone who wants to contribute in any sort of form. One way of doing that is by helping with the development of Armadillo. To help you get started, we've put together some information to get you started and help you get familiarised with our code and way of working.</p>  General information Java JavaScript/VueJS R <p>Commits and automatic releases</p> <p>Versionnumbers are updated according to semantic versioning, using conventional commits.</p> <p>It is especially important to correctly identify and commit user-facing changes. These being: bugfixes and new features. The correct prefix to a commit will trigger an automatic release. Automatic releases are set to be pre-releases.</p> <p>Each commit with <code>!</code> just before the colon <code>:</code> is a major update, indicating a breaking change. So use it wisely.  You can also add <code>BREAKING CHANGE:</code> in the long commit message format.</p> <ul> <li>Use <code>feat!: ...</code> or <code>fix!: ...</code> for a major upgrade, indicating a breaking change.</li> <li>Use <code>feat: ...</code> for a minor upgrade, indicating a new feature.</li> <li>Use <code>fix: ...</code> for a patch update, indicating a bugfix.</li> </ul> <p>Releases As mentioned above, the automatic releases in Armadillo are pre-releases. Normal releases are done manually whenever deemed necessary. Of course a new release can be requested anytime.</p> <p>Testing and continuous integration All our repositories contain unittests. Although we usually aim for a coverage of 80%, sometimes we make an exception. Tests are ran as part of our continuous integration, on each pull request and each merge with the master.</p> <p>Pull request We encourage everyone to contribute to MOLGENIS armadillo. We do however have a couple of requirements for a pull requests, mostly because of our automatic processes.</p> <ol> <li>Start the title of your PR with prefix using conventional commits (see general information tab)</li> <li>When you're fixing an issue, include \"closing #issuenumber\" or \"fixes #issuenumber\" in a commit in the PR</li> <li>Describe what your PR does shortly and how to test it.</li> </ol> <p>Armadillo API and Swagger Armadillo can be controlled using its REST API. To see and test all available endpoints, you can visit Armadillo's swaggerpage. Swagger is a very useful tool for exactly this purpose. The page can be found on  <code>/swagger-ui/index.html</code> of each Armadillo instance. If you want to see an example of our swagger page, you can  visit it on our demo server. </p> <p></p> <p>Example of an endpoint tested our using our swagger page.</p> <p>The serverside code of MOLGENIS Armadillo  (molgenis-service-armadillo) is written in Java. In order to run it locally you will need the following prerequisites:</p> <ul> <li>Java 17 (unless running with Docker)</li> <li>Docker</li> </ul> <p>Project Structure If you look at the java code in our repository, you might notice there are two parts to it:</p> <ul> <li>Armadillo</li> <li>R</li> </ul> <p>The Armadillo part is the main application that contains all basic funcitonality and APIs. It uses the R part to communicate with R, using DataSHIELD logic. </p> <p>Tools pre-commit This repository uses <code>pre-commit</code> to manage commit hooks. An installation guide can be found here. To install the hooks, run <code>pre-commit install</code> from the root folder of this repository. Now your code will be automatically formatted whenever you commit. The pre-commit hooks we've set, will reformat new code upon commit, so that it matches our code style. </p> <p>Running There are several ways to run armadillo. What you're planning on doing with armadillo determines the best way to go. If you just want to test how it works, runnig via the jar or even using docker is very suitable. If you're planning on writing code yourself, it's better to clone the project, build it yourself and run it, either using your IDE (we use IntelliJ), or running the jar you built locally.</p> <p>Jar</p> <ol> <li>Download the jar from our releases page. </li> <li>Copy paste the contents of  application-template.yml and paste it in a file called <code>application.yml</code>, in the same folder as the downloaded jar. </li> <li>To start the application, run <code>java -jar molgenis-armadillo-x.yy.zz.jar</code>.</li> <li>Go to <code>http://localhost:8080</code> to see the Armadillo UI.</li> </ol> <p>Docker For testing without having to installing Java you can run using docker:</p> <ol> <li>Install docker-compose</li> <li>Download this docker-compose.yml.</li> <li>Execute <code>docker-compose up</code></li> <li>Once it says 'Started', go to http://localhost:8080 to see your Armadillo running.</li> </ol> <p>The command must run in the same directory as the downloaded docker file.  We made docker available via 'docker.sock' so we can start/stop DataSHIELD profiles.  Alternatively you must include the datashield profiles into this docker-compose.  You can override all application.yml settings via environment variables (see commented code in docker-compose file).</p> <p>IntelliJ We develop Armadillo using IntelliJ. To do so:</p> <ol> <li>Clone our project: <pre><code>git clone https://github.com/molgenis/molgenis-service-armadillo.git\n</code></pre></li> <li>Open the project in Intellij. </li> <li>Make sure the right version of Java is set in <code>File&gt; Project structure...</code></li> <li>Build the project: select the gradle button (elephant symbol, usually on the right of your intellij screen), select <code>clean</code> and then <code>build</code>. </li> <li>Go to the <code>ArmadilloServiceApplication</code> class (press shift-shift and search for it).</li> <li>Click on the play button in front of the main function. You might have to press \"Run\" again if a popup with the run configuration appears.</li> </ol> <p>Testing Most of our code is covered by unittests. Although we usually aim for a coverage of 80%, sometimes we make exceptions because we value quality of tests over their quantity. We recognise that for some pieces of code it's hard to write meaningful unittests (half of some functions would have to be mocked, usually causing tests to lose their purpose). This is especially the case in our Java repository. Of course we don't want these pieces untested, therefore we have a set of release test scripts. This test is made to test basic functionality from Datamanager and Researcher perspective using the most commonly used DataSHIELD packages. This test script is used before each release to ensure Armadillo's quality. The script also runs partly (without OIDC) in our continuous integration test on each pull request, as well as the unittests.</p> <p>host.docker.internal error This error is returned only in development environments, when working on an unsupported operating system and running a profile that has the <code>resourcer</code> R package whitelisted. The only way to fix this error, is by temporarily altering the Armadillo source code in the  DockerService.java Go to the <code>install_image</code> method to where <code>createContainerCmd</code> is called: <pre><code>cmd.withExposedPorts(exposed)\n...\n.exec()\n</code></pre> Simply add <code>.withExtraHosts(\"host.docker.internal:host-gateway\"))</code> before the <code>.exec()</code>. To ensure the code is properly updated, we suggest rebuilding the code before restarting Armadillo. If you already had the profile  running, you will need to restart that as well.</p> <p>The user interface (UI) of MOLGENIS Armadillo is written in JavaScript, using VueJS as framework. We use <code>yarn</code> to  compile the code and develop in VSCode. Our setup is as follows:</p> <ol> <li>Open the armadillo repository, and build and run it in InteliJ (as described in Java Developer guide)</li> <li>Open the ui folder of the repository in VSCode.</li> <li>Install using: <pre><code>yarn install\n</code></pre></li> <li>Run dev server using: <pre><code>yarn dev\n</code></pre> You can now login on http://localhost:8080 and then switch to http://localhost:8081 to directly see the changes you're changing the UI code. </li> </ol> <p>We maintain several R packages:</p> <ul> <li>MolgenisArmadillo</li> <li>DSMolgenisArmadillo</li> <li>DSUpload</li> <li>DSTidyVerse</li> <li>DSTidyverseClient</li> </ul> <p>We aim to release all our packages (excluding DSUpload) to CRAN, to increase visibility and compatibility. This means that documentation and vignettes should be updated in every pull request that changes or updates  functionality.</p>"},{"location":"pages/examples_usage/","title":"Example of usage","text":"<p>User management</p> <p>Project management</p> <p>Profile management </p>"},{"location":"pages/faq/","title":"Frequently Asked Questions","text":"Docker gives a <code>java.socket</code> error <p>You might need to enable Docker socket. On Docker desktop you can find that under 'settings' and 'advanced'.</p> Can I use docker compose to start profiles? <p>Instead of making Armadillo start/stop DataSHIELD profiles you can also use docker compose. See commented section in docker-compose.yml file.</p> Can I pass environment or commandline variables instead of application.yml? <p>Yes, it is standard spring.</p> Can I run Armadillo with oauth2 config offline? <p>Yes, you can run in 'offline' profile <pre><code>./gradlew run -Dspring.profiles.active=offline\n</code></pre></p> How to run Armadillo version 2? <p>For armadillo 2.x you can follow instructions for testing we use docker compose. For production environment we are using Ansible</p> How to run Armadillo as developer? <p>We develop Armadillo using IntelliJ.</p> How to build Armadillo <p>Run following command in the github root: <code>./gradlew build</code></p> <p>To execute in 'dev' run following command in the github root: <code>./gradlew run</code></p> <p>Setting up development tools</p> <p>This repository uses <code>pre-commit</code> to manage commit hooks. An installation guide can be found here. To install the hooks, run <code>pre-commit install</code> from the root folder of this repository. Now your code will be automatically formatted whenever you commit.</p> <p>How to change data directory</p> <p>Data is automatically stored in the <code>data</code> folder in this repository. You can choose another location in <code>application.yml</code> by changing the <code>storage.root-dir</code> setting.</p> <p>When you run Armadillo locally for the first time, the <code>lifecycle</code> project has not been added to the system metadata yet. To add it automatically, see Application properties. Alternatively you can add it manually:</p> <ul> <li>Go to the Swagger UI (<code>http://localhost:8080/swagger-ui/index.html</code>)</li> <li>Go to the <code>PUT /access/projects</code> endpoint</li> <li>Add the project <code>lifecycle</code></li> </ul> <p>Working with resources in development mode</p> <p>When developing locally, docker has trouble connecting to localhost. This problem becomes clear when working with resources. Luckily there is a quick fix for the problem. Instead of defining a resource as for example <code>http://localhost:8080/storage/projects/omics/objects/test%2Fgse66351_1.rda</code>, rewrite it to: <code>http://host.docker.internal:8080/storage/projects/omics/objects/test%2Fgse66351_1.rda</code>. Here's some example R code for uploading resources:</p> <p><pre><code>## Uploading resources\nlibrary(MolgenisArmadillo)\nlibrary(resourcer)\n\ntoken &lt;- armadillo.get_token(\"http://localhost:8080/\")\n\nresGSE1 &lt;- resourcer::newResource(\n  name = \"GSE66351_1\",\n  secret = token,\n  url = \"http://host.docker.internal:8080/storage/projects/omics/objects/test%2Fgse66351_1.rda\",\n  format = \"ExpressionSet\"\n)\n\narmadillo.login(\"http://localhost:8080/\")\narmadillo.upload_resource(project=\"omics\", folder=\"ewas\", resource = resGSE1, name = \"GSE66351_1\")\n</code></pre> And for using them: <pre><code>library(DSMolgenisArmadillo)\nlibrary(dsBaseClient)\n\ntoken &lt;- armadillo.get_token(\"http://localhost:8080/\")\n\nbuilder &lt;- DSI::newDSLoginBuilder()\nbuilder$append(\n  server = \"local\",\n  url = \"http://localhost:8080/\",\n  token = token,\n  driver = \"ArmadilloDriver\",\n  profile = \"uniform\",\n  resource = \"omics/ewas/GSE66351_1\"\n)\n\nlogin_data &lt;- builder$build()\nconns &lt;- DSI::datashield.login(logins = login_data, assign = TRUE)\n\ndatashield.resources(conns = conns)\ndatashield.assign.resource(conns, resource=\"omics/ewas/GSE66351_1\", symbol=\"eSet_0y_EUR\")\nds.class('eSet_0y_EUR', datasources = conns)\ndatashield.assign.expr(conns, symbol = \"methy_0y_EUR\",expr = quote(as.resource.object(eSet_0y_EUR)))\n</code></pre></p>"},{"location":"pages/license/","title":"License","text":"<p>GNU Lesser General Public License v3.0. Find the complete document  here.</p>"},{"location":"pages/quick_start/","title":"Quick Start","text":"<p>MOLGENIS Armadillo facilitates federated analysis using DataSHIELD.  To learn more about DataSHIELD, visit their website or our Basic Concepts page.</p> <p>First we need to determine what kind of user you are:</p> <ol> <li> <p> Data Manager</p> </li> <li> <p> System Operator</p> </li> <li> <p> Researcher</p> </li> <li> <p> Developer</p> </li> </ol>"},{"location":"pages/quick_start/#data-manager","title":"Data manager","text":"<p>Data management can be done in different ways: the Armadillo User Interface, the MolgenisArmadillo R client, or using DsUpload. </p>"},{"location":"pages/quick_start/#user-interface","title":"User interface","text":"<p>In the armadillo user interface, data managers can login and manage users, projects and profiles. They can also see the logs (e.g. to understand errors that may have occurred or to monitor use). To get to know more about the UI, visit the usage examples page.</p> <p></p> <p>Please note that the user interface is only accessible by users with admin rights (i.e. usually data managers and not researchers) only. Users without admin permissions will get the following message:</p> <p></p> <p>You are logged in but you don't have permission to access the Armadillo user interface.</p>"},{"location":"pages/quick_start/#armadillo-r-client","title":"Armadillo R client","text":"<p>Data can also be managed using the MolgenisArmadillo R client. The following code block is an example of how to create a project and upload data. </p> <pre><code># Install and load the package\nremotes::install.packages('MolgenisArmadillo')\nlibrary('MolgenisArmadillo')\n\n# Login\narmadillo.login(\"https://armadillo-url-example.org\")\n\n# Load the iris dataset to upload as test\nlibrary(datasets)\n\n# Create a project called \"project\"\narmadillo.create_project(\"project\")\n\n# Upload the data in a folder called \"folder\"\narmadillo.upload_table(\"project\", \"folder\", iris)\n</code></pre> <p>Data is organised in projects. These projects can be compared to folders on the filesystem of your computer.  Users can be granted access to specific projects. Within those projects, data are organised in folders.</p> <p></p> <p>A typical project structure looks like this.</p>"},{"location":"pages/quick_start/#dsupload","title":"DsUpload","text":"<p>dsUpload is an R package that aids data managers in the data uploading process. Data uploaded using this package has to fit the  dsDictionaries format. </p>"},{"location":"pages/quick_start/#system-operator","title":"System Operator","text":"<p>System Operators are the people who install the software (Molgenis Armadillo) on the server. Installing is a quick and straightforward process, for full details please view the Install Guide.</p>"},{"location":"pages/quick_start/#researcher","title":"Researcher","text":"<p>As a reseracher you will need to arrange access to each Armadillo (or Opal) server that holds the data you want to analyse.  This guide shows you how to login, assuming you have been granted access to the server and the data. </p> <p>Research is conducted using R. To begin with you need install and load the following packages:</p> <p><pre><code>install.packages(c(\"DSI\", \"DSMolgenisArmadillo\", \"dsBaseClient\"))\nlibrary(DSI)\nlibrary(DSMolgenisArmadillo)\nlibrary(dsBaseClient)\n</code></pre> With these libraries, you can now login to Armadillo: <pre><code>url &lt;- \"https://armadillo-demo.molgenis.net/\"\ntoken &lt;- armadillo.get_token(url)\nbuilder &lt;- DSI::newDSLoginBuilder()\n\nbuilder$append(\n  server = \"armadillo\",\n  url = url,\n  token = token,\n  driver = \"ArmadilloDriver\",\n  profile = \"xenon\")\n\nlogindata &lt;- builder$build()\nconns &lt;- DSI::datashield.login(logins = logindata)\n</code></pre> To use the data, you first need to 'assign' it. This means to create a temporary copy on the server within your RSsesion. You can use the following code: <pre><code>datashield.assign.table(conns, \"mtcars\", \"project/data/cars\")\n</code></pre> To see the data assigned in your workspace use: <pre><code>ds.ls()\n</code></pre></p> <p>If all of this succeeds, your access to Armadillo is setup correctly. </p> <p>For detailed information on how to use DataSHIELD as a researcher, please visit the DataSHIELD Wiki</p> <p>For more extensive documentation Armadillo, please visit our documentation for <code>DSMolgenisArmadillo</code>.</p>"},{"location":"pages/quick_start/#developer","title":"Developer","text":"<p>We encourage fellow developers to help us with new features or bugfixes in Armadillo, or help us with our R  packages. To run Armadillo locally, first clone the git repository: <pre><code>git clone https://github.com/molgenis/molgenis-service-armadillo.git\n</code></pre> You first need to configure armadillo in the <code>application.yml</code>. To do that, you first will need to create this file.  The easiest way to do that is by copying the  application.template.yml and name it <code>application.yml</code>. </p> <p>If you are using IntelliJ, open the <code>ArmadilloServiceApplication</code> class (press shift twice and type the class name to go there), and press the play button on the main function. You might have to first set the Java version (java 17). Armadillo  will initialise up without oAuth configured, so you can login using the username <code>admin</code> and the password specified in  <code>application.yml</code> (default: <code>admin</code>). </p> <p>For more information, see our Developer guides and License. </p>"},{"location":"pages/troubleshooting/","title":"Troubleshooting","text":""},{"location":"pages/basic_usage/","title":"Basic Usage","text":"<p>Depending on your role you have different options to interact with MOLGENIS Armadillo.</p>  Data Manager System Operator Researcher Developer <p>A data manager will typically interact with Armadillo in multiple ways:</p> <ul> <li>Using the Armadillo User Interface (UI)</li> <li>Using a R client MolgenisArmadillo</li> <li>Using dsUpload (R) to upload data with the help of predefined harmonised data dictionaries (ds-dictionaries).</li> </ul> <p>System operator: Authentication server</p> <p>A researcher will connect to a Armadillo server with a R client DSMolgenisArmadillo, this client allows for execution of DataSHIELD functions. Depending on the way your cohort has been setup you might use the R client through the Central Analysis server (CAS). In both cases the researcher has installed R and Rstudio to edit and run their analysis.</p> <p>A developer can use DataSHIELD Lite (DSLite) as a serverless DataSHIELD Interface (DSI) implementation which purpose is to mimic the behavior of a distant (virtualized or barebone) data repository server like Armadillo or Opal.</p>"},{"location":"pages/basic_usage/armadillo_ui/","title":"Armadillo UI","text":"<p>Relevant for: </p> <p>Armadillo features a user interface, or UI for short.</p>"},{"location":"pages/basic_usage/armadillo_ui/#login","title":"Login","text":"<p>To login to the UI, select the Institute account (oath2) button and login using the institute or organisation login screen you will be redirected to.</p>"},{"location":"pages/basic_usage/armadillo_ui/#superuser","title":"Superuser","text":"<p>You need to have admin or superuser permissions if you want to add projects, users or profiles. This means you need to be granted permission in order to be able to use the UI. If you don't have correct permissions, you will receive the following error:</p> <p></p> <p>If you receive this error, contact someone in your institute that is already able to login without an error, or contact MOLGENIS Support.</p> <p>To grant a user superuser permissions simply search for that user in the <code>Users</code> tab of the UI, and tick the admin checkbox for that user:</p> <p></p>"},{"location":"pages/basic_usage/armadillo_ui/#projects","title":"Projects","text":"<p>Once you're logged in, you will be redirected to the <code>Projects</code> page. On this page you can add and edit projects.</p> <p>You can add users to projects and navigate to the \"project-editor\"-view and search through the projects using the search bar on the top right.</p> <p></p>"},{"location":"pages/basic_usage/armadillo_ui/#editing-projects","title":"Editing projects","text":"<p>To edit your project, click on the edit button in front of the project you want to edit: .</p> <p>The row will be opened in edit mode:</p> <p></p> <p>The edit mode can be recognized by its blue background color and you have the option to add new users to your project by clicking on the + button  of the users column. Then, you can either select an existing user from the dropdown, or add the email address of a new user.</p> <p></p> <p>In case of adding a user in this screen, a warning will be shown to prevent email addresses with typographical errors from being added to your system. For example, if you have the address <code>j.doe@example.com</code> in your users table but attempt to add <code>j.die@example.com</code> a warning message will be displayed asking if you want to add a new user.</p> <p></p> <p>It is not possible to edit the name of your project; this is intentional in order to ensure tables, resources, users, and permissions are transferred to the new project name correctly.</p> <p>Click on the checkmark  to save the edited row and the X  to cancel.</p> <p>Be careful, if you do cancel your changes will be lost.</p>"},{"location":"pages/basic_usage/armadillo_ui/#adding-projects","title":"Adding projects","text":"<p>To add a new project, click on the + button  on top of the table. If you click this button, an empty row will be opened in edit mode.</p> <p></p> <p>Click on the checkmark  to save the edited row and the X  to cancel.</p> <p>Be careful, if you do cancel your changes will be lost.</p>"},{"location":"pages/basic_usage/armadillo_ui/#project-explorer","title":"Project explorer","text":"<p>If you click on the icon  next to the project name, you will be directed to the <code>project editor</code>. In this screen you can upload and preview data in projects. To go back to your <code>projects</code> page, press the back button .</p> <p></p> <p>If you click on a folder, it will open.</p> <p></p> <p>Here you can upload files to that folder, or click on the tables (files) to preview their contents.</p> <p></p> <p>To upload files, either drag a file from your file browser to the file upload area, or click the area and select the file.</p> <p></p> <p>After selecting the file, click on upload to upload it. This usually only takes a few seconds but will take longer in your uploading a large file.</p> <p>It is also possible to create new folders. To do so, click the \"add folder\" button  just below the project name. An input dialog will be presented:</p> <p></p> <p>Fill in the name you want to use and click on the checkmark button . Please keep in mind that the folder will only be saved if you put data into it. Select the new folder to select files to upload.</p>"},{"location":"pages/basic_usage/armadillo_ui/#resources","title":"Resources","text":"<p>All file types can be uploaded into Armadillo, however previews will only be available for <code>.parquet</code> files. Other files that can be uploaded are treated as resources. Resource filetypes usually are <code>.rda</code> files or <code>.Rdata</code> files.</p> <p>To be able to use these resources as a researcher, first an <code>.rds</code> file must be generated. How to create these files, is described here.</p> <p>The URL of your resources should consist of:</p> <pre><code>{your url}/storage/projects/{project name}/objects/{name of the folder}%2F{the resource file}\n</code></pre> <p>Here is an example, with some example parameters:</p> <pre><code>url = \"https://armadillo3.demo.molgenis.net\"\nproject = \"omics\"\nfolder = \"ewas\"\nfile = \"gse66351_1.rda\"\n</code></pre> <p>Which results in the following url:</p> <pre><code>https://armadillo3.demo.molgenis.net/storage/projects/omics/objects/ewas%2Fgse66351_1.rda\n</code></pre>"},{"location":"pages/basic_usage/armadillo_ui/#users","title":"Users","text":"<p>The <code>Users</code> page works just as the <code>Projects</code> page. You can search users by entering (a part of) the email address or name of the user into the search box:</p> <p></p>"},{"location":"pages/basic_usage/armadillo_ui/#editing-users","title":"Editing users","text":"<p>Users can be edited, except for their email addresses. This is because when user's email address changes, that user is possibly no longer working for the same institution and therefore might not be allowed to access the data anymore.</p> <p></p> <p>In edit mode, the row will turn blue. Projects can be added by clicking on the + icon in the projects column.</p> <p></p> <p>You can add a new project by typing it and clicking the checkmark button . You will be prompted with a warning message, asking you to confirm if you want to add a new project.</p> <p>Alternatively, you can select an existing project by using the search box or scrolling through the presented list.</p>"},{"location":"pages/basic_usage/armadillo_ui/#adding-users","title":"Adding users","text":"<p>By clicking on the plus button  on the top of the table, a new user can be added. The row with the new user will turn blue in edit mode.</p> <p></p> <p>Users can be added before they have logged in previously. These users can be added to projects, which will grant them permission to use the data from those projects upon their first login. Researchers should not be set as admin.</p>"},{"location":"pages/basic_usage/armadillo_ui/#analysis-profiles","title":"Analysis Profiles","text":"<p>Since the release of Armadillo 3.0.0, it is possible to create and manage analysis profiles in the user interface, rather than asking system administrators to manage these profiles. You can start  and stop  profiles.</p> <p>When you start a profile for the first time, it will take a bit longer to load because the profile needs to be downloaded and installed before it can be started.</p> <p></p> <p>If you switch to another screen whilst either starting or stopping a profile, the profiles page will no longer show the loading information. It is however still loading, and when it's done, if you reload the page, you will see that your profile started or stopped successfully.</p> <p>As in the other screens, you can add profiles with the add-button .</p> <p></p> <p>By default, some fields will be set. Please update them to install the correct profile.</p> <p>Possible images can be found on dockerhub. We recommend selecting one of the DataSHIELD standard profiles. The image name of those profiles can be found on the dockerhub link above.</p> <p>Although the default <code>port</code> setting should find an available port, please keep in mind that the port has to be unique, otherwise you cannot start your profile and will receive an error message.</p> <p>R packages can be whitelisted by adding them to the <code>package whitelist</code> column so researchers can use them. 'Whitelisting' a package allows analysts to use it. If you want to whitelist a package, you need to make sure it is installed on the image you selected. Additionally, it is possible to blacklist certain R functions in the <code>blacklist function</code> column. This can be useful if certain functions are not allowed to be used on certain data or within certain cohorts.</p> <p>Sometimes profiles are updated, for example if new features are added or security updates are applied. To manually update a profile, you just need to start and stop the profile and the new version will be installed. </p> <p>From Armadillo v.5.2.0 and higher, it is also possible to automatically update profiles. Edit the profile, check the 'Auto Update' box and schedule when you would like Armadillo to check for updates. At the scheduled time a check will be performed, and if there is an update available Armadillo will automatically install the latest version.  </p>"},{"location":"pages/basic_usage/auth/","title":"Authentication server","text":"<p>Relevant for: </p> <p>Authentication server: https://lifecycle-auth.molgenis.org/</p>"},{"location":"pages/basic_usage/central_analysis_server/","title":"Central Analysis Server (CAS)","text":"<p>Relevant for: </p> <p>Most networks use the analysis environment instead of their locally installed R/Rstudio environment. The analysis environment is centralized. You will be using a web based RStudio which is available here: https://lifecycle.analysis.molgenis.org/</p> <p>The benefit of using a CAS server is a additional layer of security, only traffic from the CAS server is accepted by the Armadillo server.</p>"},{"location":"pages/basic_usage/ds_molgenis_armadillo/","title":"DSMolgenisArmadillo","text":"<p>Relevant for: </p> <p>Use DSMolgenisArmadillo to analyse data shared in MOLGENIS Armadillo servers using DataSHIELD. DataSHIELD allows execution of a subset of analysis methods available in R. Methods such as:</p> <p><code>ds.mean()</code> <code>ds.glm()</code> <code>ds.lmerSLMA()</code></p> <p>For more detailed information please visit DSMolgenisArmadillo and additionally check the documentation: https://cran.datashield.org/.</p> PrerequisiteBasic usage Example Prerequisite.r<pre><code>install.packages(\"DSI\")\ninstall.packages(\"DSMolgenisArmadillo\")\ninstall.packages(\"dsBaseClient\", repos = c(\"http://cran.datashield.org\", \"https://cloud.r-project.org/\"), dependencies = TRUE)\n\nlibrary(dsBaseClient)\nlibrary(DSMolgenisArmadillo)\n</code></pre> Example Analyse_data_subset_DSMolgenisArmadillo.r<pre><code>library(dsBaseClient)\nlibrary(DSMolgenisArmadillo)\n\n# specify server url\narmadillo_url &lt;- \"https://armadillo.test.molgenis.org\"\n\n# get token from central authentication server\ntoken &lt;- armadillo.get_token(armadillo_url)\n\n\n# build the login dataframe\nbuilder &lt;- DSI::newDSLoginBuilder()\nbuilder$append(\n    server = \"armadillo\",\n    url = armadillo_url,\n    token = token,\n    table = \"workshop1/2_1-core-1_0/nonrep\",\n    driver = \"ArmadilloDriver\"\n)\n\n# create loginframe\nlogindata &lt;- builder$build()\n\n# login into server\nconns &lt;- datashield.login(\n    logins = logindata, \n    symbol = \"core_nonrep\", \n    variables = c(\"coh_country\"), \n    assign = TRUE\n)\n\n# calculate the mean\nds.mean(\"core_nonrep$coh_country\", datasources = conns)\n\nds.histogram(x = \"core_nonrep$coh_country\", datasources = conns)\n</code></pre> <p>Info</p> <p>A researcher only has access to data if he/she has been granted access to this data (typically) by a data manager or administrator of a cohorts Armadillo server.</p> <p>Note</p> <p>The example files used in the examples above can be found here: nonrep.parquet, yearlyrep.parquet</p> <p>Load these <code>parquet</code> files in R and see which variables you can call.</p>"},{"location":"pages/basic_usage/dslite/","title":"DSLite","text":"<p>Relevant for: </p> <p>DataSHIELD Lite (DSLite) is a serverless DataSHIELD Interface (DSI) implementation which purpose is to mimic the behavior of a distant (virtualized or barebone) data repository server like Armadillo or Opal. The datasets that are being analyzed are fully accessible in the local environment. The DataSHIELD configuration (set of allowed aggregation and assignment functions) is discovered at runtime by inspecting the DataSHIELD server-side R packages installed locally. This configuration can also be amended or provided explicitly.</p> <p>DSLite can be used to:</p> <ul> <li>speed up development and testing cycle when developing new DataSHIELD functions (both at server and client side): no need to deploy a data repository infrastructure.</li> <li>allow DataSHIELD analysis with combined datasets, some of them being accessible remotely in secure data repositories, others being privately accessible (in a governmental institution for instance).</li> </ul>"},{"location":"pages/basic_usage/dsupload_dsdictionaries/","title":"DsUpload &amp; DsDictionaries","text":"<p>Relevant for: </p> <p>DataSHIELD upload tools (DsUpload) s a collections of tools used to upload data into DataSHIELD backends like Armadillo and Opal. It aids data managers in the initial stages of uploading data to DataSHIELD backends.</p> <p>DsUpload depends on DsDictionaries which holds the harmonised data dictionaries of multiple projects like Lifecycle and Athlete.</p> <p>Info</p> <p>Visit MOLGENIS European Health Research Data and Sample Catalogue which is used by projects like Lifecycle and Athlete to harmonise their variables!</p>"},{"location":"pages/basic_usage/molgenis_armadillo/","title":"MolgenisArmadillo","text":"<p>Relevant for: </p> <p>MolgenisArmadillo is a R library that can be used by data managers to share datasets on a MOLGENIS Armadillo server. Researchers can then analyse these datasets and datasets shared on other servers using DataSHIELD. Researchers will only be able to access aggregate information and cannot see individual rows.</p> <p>For more detailed information please visit MolgenisArmadillo.</p> <p>Below some basic operations to get you started using MolgenisArmadillo:</p> PrerequisiteBasic usageCreate subsets Example Prerequisite.r<pre><code># install the following packages\ninstall.packages(\"MolgenisArmadillo\")\ninstall.packages(\"dplyr\")\ninstall.packages(\"arrow\")\n# After installation make sure you can load the libraries\nlibrary(MolgenisArmadillo)\nlibrary(dplyr)\nlibrary(arrow)\n# verify the loaded libraries (see: other attached packages)\nsessionInfo()\n</code></pre> Example MolgenisArmadillo.r<pre><code>## Prerequisites\n#\n# - Run the code in Prerequisite.r\n#\nlibrary(MolgenisArmadillo)\n\n## \n# To share your data using Armadillo, you first need to login\n\n## Login\n#\n# In order to access the files as a data manager, you need to log in. \n# The login method needs the URLs of the Armadillo server.\n# It will open a browser window where you can identify yourself with the ID provider.\n# \n# If you are unsure how this login function (or any function) works ask R to provide documentation\n?armadillo.login\n\narmadillo.login(\n    armadillo = \"https://armadillo.test.molgenis.org\"\n)\n#token &lt;- armadillo.get_token(\"https://armadillo.test.molgenis.org\")\n\n# armadillo.login will create a session and store the credentials in the environment.\n\n## Structure\n# To share data via Armadillo you can have a nested structure to save you data.\n\n# We distinguish:\n# - projects\n# - folders\n# - tables\n\n### Projects\n# Projects are root-folders you can give persons permissions on. \n# you can imagine that you will use a separate project for each study you need to support. \n# This way you make sure people can not see each others variables.\n\n### Folders\n# Folder objects can be used to version the different tables you want to share in Armadillo. \n# This is not mandatory and are free to use the folder level as you see fit. \n# In our examples we will go into the versioning part a bit deeper.\n\n### Tables \n# Tables contain the data you want to share. \n# This can be all the data on a certain subject, mostly used in consortia or a specific study you want to expose.\n\n## Sharing data\n# Assume you are in a consortia which has core-variables and outcome-variables. \n# You want to share and version the whole dataset to all researchers which applied to access your data.\n\n# First we will create the project. In our case \"ipec\".\n\ncohort &lt;- \"workshop2\"\narmadillo.create_project(cohort) \n\n# Secondly we will load the table(s) we want to upload to Armadillo in the R-environment. \n# We have test data which is in `arrow` format, the upload will take any object that has a table like structure to upload into the Armadillo. \n# This can be SPSS, STATA, SAS or R-based data as well.\n\nlibrary(arrow)\n\n# load the core data (make sure you are working in the correct directory)\nnonrep &lt;- arrow::read_parquet(\"data/nonrep.parquet\")\nyearlyrep &lt;- arrow::read_parquet(\"data/yearlyrep.parquet\")\n\n# explore your data (sanity check)\nView(nonrep)\ndim(nonrep)\nnames(nonrep)\ntable(nonrep$recruit_age)\n\n# The third step is determining the second level, which contains in this case the datamodel-version the type of variables and the data-version.\n\n# y_y-#variable-type#-x_x\n\n# y_y = datamodel version\n# x_x = data version\n\n# upload the core variables\narmadillo.upload_table(cohort, \"2_1-core-1_0\", nonrep)\narmadillo.upload_table(cohort, \"2_1-core-1_0\", yearlyrep)\n\n## Looking at the data\n# There are helper functions to help you determine what is in the storage server. \n# You can list projects and tables to what's in the storage.\n\n# list of projects\narmadillo.list_projects()\n\n# listing tables per project\narmadillo.list_tables(cohort)\n\n# You can download the data in the R-environment as well.\n\n# download table to local R environment\ndownload_nonrep &lt;- armadillo.load_table(cohort, \"2_1-core-1_0\", \"nonrep\")\n\n# check the column names from the local environment\ncolnames(download_nonrep)\n\n# check if local data and uploaded data are equal (optional)\nsetequal(nonrep, download_nonrep)\n\n# Now you can also take a look at the files in the user interface of the MinIO file server\n# open the MinIO server URL in a browser window (used in armadillo.login).\n\n# &gt; !IMPORTANT: run this part after subsetting the data\n\n## Deleting the data \n# To delete the data you need to throw away the contents first.\n\n# throw away the core tables\narmadillo.delete_table(cohort, \"2_1-core-1_0\", \"nonrep\")\narmadillo.delete_table(cohort, \"2_1-core-1_0\", \"yearlyrep\")\n\n# Now you can delete the project.\narmadillo.delete_project(cohort)\n</code></pre> Example Creating_data_subsets_Armadillo.r<pre><code>## Creating data subsets on the Armadillo server\n# When researchers request access to your data they may in many cases not be granted access to the whole data set, but only to a subset. \n# Here you can see the different relevant steps you need to take to create these subsets.\n#\n# - Setting up the environment\n# - Logging into the servers\n# - Exploring the data\n# - Making subsets of the data\n# - Upload data subsets\n#\n# - Delete data subsets\n\n## Setting up the environment\n# - Run the code in 0_Prerequisite.r\n\n# load required libraries\nlibrary(MolgenisArmadillo)\nlibrary(dplyr)\n\n## Logging in to the servers\n# In order to access the files you need to log in using the URLs of the Armadillo server. \n# A browser window will be opened where you can identify yourself with the ID provider.\n\narmadillo.login(\n    armadillo = \"https://armadillo.test.molgenis.org\"\n)\n# A session will be created and the credentials are stored in the environment.\n\n## Explore the data\n# Let's assume you are in a consortium which has core-variables and outcome-variables. \n# You want to share a subset of the whole data set with certain researchers that applied for access to your data.\n\n# List projects on the Armadillo server.\narmadillo.list_projects()\n\n# Next create a study, here called 'subset1'.\n# NOTE: change the name of the subset for your own practice run\n\nstudy &lt;- \"study1\"\narmadillo.create_project(study)\n\n# List the tables in a project\n\n# You want to share data from the cohort you just uploaded (MolgenisArmadillo.r). \n# Change the cohort_name to your own cohort name here:\ncohort = \"workshop1\"\n\n# List the available tables within this project.\narmadillo.list_tables(cohort)\n\n# Subset the core variables\n# Download the relevant core tables to the local environment\n\nnonrep &lt;- armadillo.load_table(cohort, \"2_1-core-1_0\", \"nonrep\")\nyearlyrep &lt;- armadillo.load_table(cohort, \"2_1-core-1_0\", \"yearlyrep\")\n\n# List their variables\n\ncolnames(nonrep)\ncolnames(yearlyrep)\n\n# Subset the variables that were requested per table.\n\nsubset_core_nonrep &lt;- nonrep %&gt;% select(child_id, asthma_m, preg_cig, preg_fever, preg_alc)\nsubset_core_yearlyrep &lt;- yearlyrep %&gt;% select(child_id, cohab_, smk_exp)\n\n## Uploading the data subset\n# Check the variables in the data subset before uploading\n\ncolnames(subset_core_nonrep)\ncolnames(subset_core_yearlyrep)\n\n# Upload the data subsets\narmadillo.upload_table(study, \"2_1-core-1_0\", subset_core_nonrep, \"nonrep\")\narmadillo.upload_table(study, \"2_1-core-1_0\", subset_core_yearlyrep, \"yearlyrep\")\n\n# See if tables are uploaded\narmadillo.list_tables(study)\n\n# Now you can also take a look at the files in the user interface of the Armadillo server. In this case: https://armadillo.test.molgenis.org/#/projects\n\n# &gt; !IMPORTANT: run this part after subsetting the data\n\n## Deleting the data \n# To delete the data you need to throw away the contents first.\n\n# throw away the core tables\narmadillo.delete_table(study, \"2_1-core-1_0\", \"nonrep\")\narmadillo.delete_table(study, \"2_1-core-1_0\", \"yearlyrep\")\n\n# Now you can delete the project.\n\narmadillo.delete_project(study)\n</code></pre> <p>Note</p> <p>The example files used in the examples above can be found here: nonrep.parquet, yearlyrep.parquet</p>"},{"location":"pages/install_management/","title":"Installation, Setup and Management","text":"System Operator <ul> <li>Armadillo Installation</li> <li>Armadillo Docker Quicksetup</li> <li>Armadillo Management</li> <li>Armadillo minor release update</li> <li>Migrate Armadillo 2 to Armadillo 3</li> <li>Migrate Armadillo 3 to Armadillo 4</li> <li>Migrate Armadillo 4 to Armadillo 5</li> </ul>"},{"location":"pages/install_management/armadillo_docker_install/","title":"Armadillo Local Quickstart Setup","text":"<p>Welcome! This guide shows how to run Armadillo, RServer, and Keycloak locally with Docker Compose.</p> <p>Note</p> <p>The preferred way to install Armadillo in production is via systemd.  Feel free to use our docker setup.</p>"},{"location":"pages/install_management/armadillo_docker_install/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker </li> <li>Docker Compose </li> <li>Git</li> </ul>"},{"location":"pages/install_management/armadillo_docker_install/#quickstart","title":"Quickstart","text":"<p>Clone this repository:</p> <pre><code>git clone https://github.com/molgenis/molgenis-service-armadillo.git\ncd molgenis-service-armadillo/docker/quickstart\n</code></pre> <p>Start the stack</p> <pre><code>docker compose up\n</code></pre> <p>This starts:</p> <ul> <li>Armadillo \u2192 http://localhost:8000</li> <li>Keycloak \u2192 http://localhost:8080  (admin console)</li> <li>RServer \u2192 localhost:6311</li> </ul> <p>Logs and data are stored in ./logs and ./data.</p>"},{"location":"pages/install_management/armadillo_docker_install/#host-file-setup","title":"Host File Setup","text":"<p>For local development, the services need to resolve each other by hostname. We recommend adding the following entries to your hosts file.</p>"},{"location":"pages/install_management/armadillo_docker_install/#linux-macos","title":"Linux / macOS","text":"<p>Edit <code>/etc/hosts</code> with sudo:</p> <pre><code>sudo nano /etc/hosts\n</code></pre> <p>add these lines:  <pre><code>127.0.0.1   armadillo\n127.0.0.1   keycloak\n127.0.0.1   rserver\n</code></pre></p>"},{"location":"pages/install_management/armadillo_docker_install/#windows","title":"Windows","text":"<ul> <li>open notepad as Administrator</li> <li>Open the file: <pre><code>C:\\Windows\\System32\\drivers\\etc\\hosts\n</code></pre></li> </ul> <p>Add the following lines:</p> <pre><code>127.0.0.1   armadillo\n127.0.0.1   keycloak\n127.0.0.1   rserver\n</code></pre>"},{"location":"pages/install_management/armadillo_docker_install/#verify","title":"Verify","text":"<pre><code>ping keycloak\n</code></pre> <p>you should see it resolve to 127.0.0.1</p>"},{"location":"pages/install_management/armadillo_docker_install/#why","title":"Why?","text":"<ul> <li>Armadillo config expects to talk to http://keycloak:8080</li> <li>Keycloak redirects back to http://armadillo:8080</li> <li>RServer is contacted by Armadillo at http://rserver:6311</li> </ul>"},{"location":"pages/install_management/armadillo_docker_install/#keycloak-setup","title":"Keycloak Setup","text":"<p>After starting with <code>docker compose up</code>, Keycloak is available at:</p> <ul> <li>Admin console: http://localhost:8081 </li> <li>Login credentials: <code>admin / admin</code></li> </ul>"},{"location":"pages/install_management/armadillo_docker_install/#import-realm","title":"Import Realm","text":"<p>The repo provides a realm config under <code>./keycloak/realms</code>. It is automatically imported on startup.</p>"},{"location":"pages/install_management/armadillo_docker_install/#add-a-test-user","title":"Add a Test User","text":"<ol> <li>Open the Keycloak Admin Console </li> <li>Go to Realms \u2192 Armadillo </li> <li>Go to Users \u2192 Add User </li> <li>Username: <code>demo@example.org</code> </li> <li>Email verified: \u2705  </li> <li>Go to Credentials \u2192 Set Password </li> <li>Password: <code>demo12345</code> </li> <li>Temporary: OFF  </li> </ol>"},{"location":"pages/install_management/armadillo_docker_install/#armadillo-configuration","title":"Armadillo Configuration","text":"<ol> <li>Add the previously added user in keycloak also to Armadillo</li> <li>Add a project</li> <li>Connect as a researcher to the service. Use http://localhost:8000 as the Armadillo URL.</li> </ol>"},{"location":"pages/install_management/armadillo_docker_install/#troubleshooting","title":"Troubleshooting","text":""},{"location":"pages/install_management/armadillo_docker_install/#keycloak-healthcheck-fails","title":"Keycloak healthcheck fails","text":"<ul> <li>Ensure port <code>9000</code> is free on your system (used for readiness checks).</li> </ul>"},{"location":"pages/install_management/armadillo_docker_install/#invalid_user_info_response-403-forbidden","title":"[invalid_user_info_response] 403 Forbidden","text":"<ul> <li>Confirm that the user exists in Keycloak and has a password set. This user also needs to be added to Armadillo.</li> </ul>"},{"location":"pages/install_management/armadillo_docker_install/#reset-stack","title":"Reset stack","text":"<pre><code>docker compose down -v\ndocker compose up --build\n</code></pre>"},{"location":"pages/install_management/armadillo_docker_install/#kubernetes","title":"Kubernetes","text":"<p>We have helm charts available for Kubernetes setup.  Profiles are maintained bij DataShield. We have helm charts available in our private repository.  If you need help or want to contribute please give us a message via support@molgenis.org or you can find us in the #Armadillo-support Slack channel </p>"},{"location":"pages/install_management/armadillo_install/","title":"Armadillo installation","text":"<p>Note</p> <p>This guide assumes you are using Ubuntu Server LTS, the installation script expects the <code>systemd</code> service. See Install alternatives below.</p>"},{"location":"pages/install_management/armadillo_install/#requirements","title":"Requirements","text":""},{"location":"pages/install_management/armadillo_install/#server-resources","title":"Server resources","text":"<p>You need a server or virtual machine to deploy the Armadillo stack. The specifications of the resource are the following, depending on the participant size of the cohort you are running.</p> Participants Memory (in GB) Diskspace (in GB) CPU cores 0-20.000 8 100 4 20.000-70.000 16 100 4 70.000 &gt; 32 150 8 <p>In case of using dsOmics this setup can be rather bigger. Please contact us for the latest specifications.</p>"},{"location":"pages/install_management/armadillo_install/#software-requirements","title":"Software requirements","text":"<ul> <li>Java 21 JRE or JDK</li> <li>Docker</li> </ul> <p>In addition to these, there are other optional components you may wish to install, such as setting up nginx as a reverse proxy.</p>"},{"location":"pages/install_management/armadillo_install/#domain","title":"Domain","text":"<p>A domain or an hostname ie <code>cohort.armadillo.domain.org</code> is required to run Armadillo.</p> <p>This domain is needed for the installation script.</p>"},{"location":"pages/install_management/armadillo_install/#authentication","title":"Authentication","text":"<p>Before we start with the deployment of Armadillo you will need to register your domain that you are going to use with your Armadillo with an authentication server. This part of the documentation is still under construction. If you would like instructions on how to set up an authentication server, please contact us.</p> <p>If you are already a partner in a consortium we are part of, we offer the option to register with our DataSHIELD authentication server. This allows you to delegate the authentication and user management. The authorization will still be under the control of the Data Manager (who gets access and who don't get access) within your armadillo installation.</p> <p>To register you will need to contact us with the chosen domains and the e-mail address of the Data Manager who is granted admin permissions in Armadillo. Also add to the mail that you want to register for the the DataSHIELD authentication server and if you belong to a project like Lifecycle, Athlete or Longitools.</p> <p>When the Armadillo domain is processed you will get an email back with data that need to be inserted in step 2.</p> <p>The values needed are:</p> <pre><code>- OIDC service url i.e. https://lifecycle-auth.molgenis.org\n- OIDC Client ID\n- OIDC Client Secret\n</code></pre>"},{"location":"pages/install_management/armadillo_install/#securing-the-connection","title":"Securing the connection","text":"<p>You need a SSL certificate to configuring the front-end proxy and make the browser use https before putting data on the server.</p> <p>If SELinux is enabled, run the following command to ensure that the application can connect to required services:</p> <pre><code>setsebool -P httpd_can_network_connect on\n</code></pre>"},{"location":"pages/install_management/armadillo_install/#installing-armadillo-as-service","title":"Installing Armadillo as service","text":"<p>We run Armadillo in production as a Linux service on Ubuntu, ensuring it gets restarted when the server is rebooted. You might be able to reproduce also on CentOS (using <code>yum</code> instead of <code>apt</code>).</p>"},{"location":"pages/install_management/armadillo_install/#1-install-necessary-software","title":"1. Install necessary software","text":"<pre><code>apt update\napt install openjdk-19-jre-headless\napt install docker.io \n</code></pre> Note <p>you might need to execute these commands as <code>sudo</code></p>"},{"location":"pages/install_management/armadillo_install/#2-run-installation-script","title":"2. Run installation script","text":"<p>This step will install the latest release.</p> <p>After installation the Armadillo application is installed with the given configuration and its service.</p>"},{"location":"pages/install_management/armadillo_install/#21-download-the-setup-script","title":"2.1 Download the setup script","text":"<pre><code>wget https://raw.githubusercontent.com/molgenis/molgenis-service-armadillo/master/scripts/install/armadillo-setup.sh \n</code></pre> <p>Or manually download the setup script via right click on this link (Right mouse 'save as')</p> <p>Make sure <code>armadillo-setup.sh</code> is executable using</p> <pre><code>chmod u+x armadillo-setup.sh\n</code></pre> <p>The installation script requires some arguments:</p> Argument Application admin-user Local armadillo admin user admin-password Secure password for the admin user datadir The location where the data is stored. This directory should be have enough diskspace en could be backuped (Default \u2192 /usr/share/armadillo/data) domain The URL where armadillo is listening on. For example: cohort.armadillo.domain.org oidc Enable OIDC, see authentication oidc_url Given oidc URL oidc_clientid Given client ID oidc_clientsecret Given secret ID"},{"location":"pages/install_management/armadillo_install/#22-run-the-install-script","title":"2.2 Run the install script","text":"<p>Adapt the following install command to suit your situation. Use <code>--help</code> to see all options.</p> Note <p>https://lifecycle-auth.molgenis.org is MOLGENIS provider of the OIDC service but you can also use your own.</p> <pre><code>bash armadillo-setup.sh \\\n    --admin-user admin \\\n    --admin-password xxxxx \n    --domain armadillo.cohort.study.com \\\n    --oidc \\\n    --oidc_url https://lifecycle-auth.molgenis.org \\\n    --oidc_clientid clientid \\\n    --oidc_clientsecret secret \\\n</code></pre>"},{"location":"pages/install_management/armadillo_install/#file-locations","title":"File locations","text":"<p>The script creates using default values the follow files and directories:</p> <pre><code>ls /etc/armadillo/application.yml\nls /etc/systemd/system/armadillo.service\nls /usr/share/armadillo/*\nls /var/log/armadillo/*\n</code></pre>"},{"location":"pages/install_management/armadillo_install/#controlling-the-armadillo-service","title":"Controlling the Armadillo service","text":"<pre><code>systemctl status armadillo\n\nsystemctl stop armadillo\n\nsystemctl start armadillo\n</code></pre> <p>After the installation is complete Armadillo is listening on port 8080. Test the setup by visiting <code>http://armadillo.cohort.study.com:8080</code> or type in the terminal <code>wget http://localhost:8080</code> to see a text response.</p> Note <p>The Armadillo website is not secure yet so you need to setup a front-end proxy.</p> <p>When having setup this front-end proxy you could get a bad gateway (see below). This mostly means Armadillo is not ready yet as you already have tested armadillo as mentioned above.</p> <pre><code>502 Bad Gateway\nnginx/1.18.0 (Ubuntu)\n</code></pre> <p>Recheck with <code>wget http://localhost:8080</code> and check the log files.</p>"},{"location":"pages/install_management/armadillo_install/#setting-up-proxy-server","title":"Setting up Proxy Server","text":"<p>We highly recommend using <code>nginx</code> with MolgenisArmadillo. We use the follow configuration located in <code>/etc/nginx/sites-available/armadillo.conf</code></p> <pre><code>server {\n  listen 80;\n  server_name armadillo.cohort.study.com\n  include /etc/nginx/conf.d/*.conf;\n  location / {\n  proxy_pass http://localhost:8080;\n  client_max_body_size 0;\n  proxy_read_timeout 600s;\n  proxy_redirect http://localhost:8080/ $scheme://$host/;\n  proxy_set_header Host $host;\n  proxy_http_version 1.1;\n  }\n}\n</code></pre> Note <p>The above is still not secure but not you can reach Armadillo from <code>http://armadillo.cohort.study.com</code>.</p> <p>To secure the communication using https we have a nginx example</p>"},{"location":"pages/install_management/armadillo_install/#backups","title":"Backups","text":"<p>A good start for data backup is the <code>/usr/share/armadillo</code> and <code>/etc/armadillo</code>. If you gave another datadir as setup option you also should backup this directory. For disaster backups you should contact your IT department.</p>"},{"location":"pages/install_management/armadillo_install/#metrics","title":"Metrics","text":"<p>Spring Boot Actuator is enabled by default in our project (including <code>/actuator/metrics</code> and <code>/actuator/prometheus</code>). You can use this in your monitoring application like prometheus. (Config example for prometheus) <pre><code>scrape_configs:\n  - job_name: 'my-armadillo-app'\n    metrics_path: '/actuator/prometheus'\n    static_configs:\n      - targets: ['armadilo.url-example.com:8080']\n</code></pre></p>"},{"location":"pages/install_management/armadillo_install/#disable-or-restrict-metrics","title":"Disable or restrict Metrics","text":"<p>Spring Boot Actuator is enabled by default in our project (including <code>/actuator/metrics</code>). Below are ways to disable or restrict it.</p>"},{"location":"pages/install_management/armadillo_install/#1-disable-metrics","title":"1. Disable Metrics","text":"<p>To remove <code>/actuator/metrics</code> from HTTP exposure, add this to <code>application.yml</code>:</p> <pre><code>management:\n  endpoints:\n    web:\n      exposure:\n        exclude: metrics\n</code></pre> <ul> <li>\u2705 Other endpoints (like <code>/actuator/health</code>, <code>/actuator/info</code>) remain available  </li> <li>\u274c <code>/actuator/metrics</code> returns <code>404 Not Found</code> </li> </ul> <p>If you want to disable all metrics collection (Micrometer), add:</p> <pre><code>management:\n  metrics:\n    enable:\n      all: false\n</code></pre>"},{"location":"pages/install_management/armadillo_install/#2-restrict-metrics-nginx-as-a-reverse-proxy","title":"2. Restrict Metrics: Nginx as a Reverse Proxy","text":"<p>At the infrastructure level, you can block or whitelist IPs for Actuator endpoints.</p> <pre><code>location /actuator/metrics {\n    allow 192.168.1.0/24;   # whitelist internal network\n    deny all;               # block others\n    proxy_pass http://localhost:8080/actuator/metrics;\n}\n\nlocation /actuator/ {\n    proxy_pass http://localhost:8080/actuator/;\n}\n</code></pre>"},{"location":"pages/install_management/armadillo_install/#install-alternatives","title":"Install alternatives","text":"<ul> <li>On local machine using java</li> <li>Armadillo running as a Docker container.</li> <li>Apache</li> </ul>"},{"location":"pages/install_management/armadillo_install/#whats-next","title":"What's next?","text":"<ul> <li>For the server owner or data manager who need to put data on to the server</li> <li>For the researcher who want to start analyzing the data on the server</li> </ul>"},{"location":"pages/install_management/armadillo_install/#apache","title":"Apache","text":"<p>It is possible to run Molgenis Armadillo using Apache, however we do not provide support with this configuration.</p>"},{"location":"pages/install_management/armadillo_install/#encoding","title":"Encoding","text":"<p>Apache requires some additional configuration to get the <code>/storage/projects/{project}/objects/{object}</code> to work. When this endpoint doesn't work:</p> <pre><code>- tables cannot be assigned\n- subsets cannot be created\n- resources cannot be used.\n</code></pre>"},{"location":"pages/install_management/armadillo_install/#tell-armadillo-about-https","title":"Tell Armadillo about https","text":"<p>We need to tell Armadillo server how to building URLs.</p>"},{"location":"pages/install_management/armadillo_install/#changes-to-your-site-enabled-configuration","title":"Changes to your site-enabled configuration","text":"<p>Your configuration probably should look like this.</p> <pre><code>ProxyPreserveHost On\n\nProxyPass / http://localhost:8080/ nocanon\n\nAllowEncodedSlashes On\n\nRequestHeader set X-Forwarded-Proto https\nRequestHeader set X-Forwarded-Port 443\n</code></pre> <p>After setting this don't forget to restart Apache.</p>"},{"location":"pages/install_management/armadillo_management/","title":"Armadillo management","text":"<p>Armadillo has three main screens to manage projects, user access and DataSHIELD profiles:</p>"},{"location":"pages/install_management/armadillo_management/#create-data-access-projects","title":"Create data access projects","text":"<p>Data managers can use the Armadillo web user interface or MolgenisArmadillo R client to create 'projects' and upload their data into those. Data tables need to be in parquet format that supports fast selections of the columns (variables) you need for analysis. Other files can be configured as 'resources'.</p>"},{"location":"pages/install_management/armadillo_management/#manage-user-access","title":"Manage user access","text":"<p>Data managers can use the permission screen to give email addresses access to the data. Everybody signs in via single sign on using an OIDC central authentication server such as KeyCloack or Fusion auth that federates to authentication systems of connected institutions, ideally using a federated AAI such as LifeScience AAI.</p>"},{"location":"pages/install_management/armadillo_management/#configure-datashield-profiles","title":"Configure DataSHIELD profiles","text":"<p>To analyse data, users must choose a datashield profile. Armadillo owners can use the web user interface to configure new profiles. Assuming you installed docker you can also start/stop these images. Alternatively you can use docker-compose for that. We recommend selecting one of the DataSHIELD standard profiles.</p>"},{"location":"pages/install_management/armadillo_management/#end-users-can-use-armadillo-as-any-other-datashield-server","title":"End users can use Armadillo as any other DataSHIELD server","text":"<p>A researcher connects from an R client to one or multiple Armadillo servers. The data is loaded into an R session on the Armadillo server specifically created for the researcher. Analysis requests are sent to the R session on each Armadillo server. There the analysis is performed and aggregated results are sent back to the client.</p>"},{"location":"pages/install_management/armadillo_migrate_2_to_3/","title":"Migrate Armadillo 2 to Armadillo 3","text":"<p>Migrating from Armadillo 2 to Armadillo 3 can be done in two variants, a full migration including projects, users and data or just projects and their users. Both options require Python (version 3.8) and additional python libraries, described in Getting started.</p>"},{"location":"pages/install_management/armadillo_migrate_2_to_3/#getting-started","title":"Getting started","text":"<p>To start the migration, python 3.8 is advised together with a number of utilitarian python libraries. Other python versions might work, but performance has only been tested with python 3.8.</p>"},{"location":"pages/install_management/armadillo_migrate_2_to_3/#install-with-python-virtual-environment","title":"Install with Python virtual environment","text":"<p>For more info see python virtual environment.</p> <p>The following code does not require superuser rights. The code does assume you are already in the scripts/upgrade directory.</p> <pre><code>python3 -m venv venv\nsource ./venv/bin/activate\npip install -r requirements.txt\n</code></pre> Tip <p>If the installation of one (or more libraries) fails, try to install the libraries one by one.</p>"},{"location":"pages/install_management/armadillo_migrate_2_to_3/#migrate-projects-users-and-data","title":"Migrate Projects, users and data","text":""},{"location":"pages/install_management/armadillo_migrate_2_to_3/#1-check-if-theres-enough-space-left-on-the-server","title":"1. Check if there's enough space left on the server","text":"<pre><code>df -h\n</code></pre> <p>Compare to:</p> <pre><code>du -h /var/lib/minio\n</code></pre> Warning <p>Available space should be at least twice the size of the MinIO folder.</p>"},{"location":"pages/install_management/armadillo_migrate_2_to_3/#2-backup-armadillo-2-settings","title":"2. Backup Armadillo 2 settings","text":"<pre><code>mkdir armadillo2-backup \nrsync -avr /usr/share/armadillo armadillo2-backup \ncp /etc/armadillo/application.yml armadillo2-backup/application-armadillo2.yml \n</code></pre> Note <p>Change <code>/usr/share</code> to the path matching your local config.</p>"},{"location":"pages/install_management/armadillo_migrate_2_to_3/#3-install-helper-software","title":"3. Install helper software","text":"<p>FIXME: Skip these steps as you have already done installing the python code in a virtual env.</p> <p>Login to your server as root, using ssh.</p> <pre><code>apt update\n\n#apt install pip\n#pip install minio\n#pip install fusionauth-client\n#pip install simple_term_menu\n</code></pre> <p>If you get a purple message asking to update, accept and install everything.</p> <p>Restart of server is recommended after this.</p> Note <p>The commands in this manual are for Ubuntu, on other linux systems, the <code>apt</code> command needs to be replaced with the correct one.</p>"},{"location":"pages/install_management/armadillo_migrate_2_to_3/#4-stop-all-docker-images-for-armadillo-2","title":"4. Stop all docker images for Armadillo 2","text":"<p>List all docker images</p> <pre><code>docker ps -a\n</code></pre> <p>Stop and remove all Armadillo 2 related images (except for MinIO), e.g.</p> <pre><code>docker rm armadillo_auth_1 armadillo_console_1 armadillo_rserver-default_1 armadillo_rserver-mediation_1 armadillo_rserver-exposome_1 armadillo_rserver-omics_1 armadillo_armadillo_1 -f \n</code></pre> <p>Check with <code>docker ps -a</code> if there are still containers running, if so remove these (except for the MinIO) in the same way as the others.</p> Warning <p>Make sure you do not remove the docker instance of MinIO before you migrated the data!</p>"},{"location":"pages/install_management/armadillo_migrate_2_to_3/#5-install-armadillo","title":"5. Install armadillo","text":"<pre><code>apt update\napt install openjdk-19-jre-headless\napt install docker.io\n</code></pre> <p>The docker.io step might fail because containerd already exists, if that's the case, remove containerd and try again:</p> <pre><code>apt remove containerd.io\napt install docker.io\n</code></pre> <p>Get armadillo:</p> <pre><code>wget https://raw.githubusercontent.com/molgenis/molgenis-service-armadillo/master/scripts/install/armadillo-setup.sh \nbash armadillo-setup.sh \\\n    --admin-user admin \\\n    --admin-password xxxxx \n    --domain my.server.com \\\n    --oidc \\\n    --oidc_url https://lifecycle-auth.molgenis.org \\\n    --oidc_clientid clientid \\\n    --oidc_clientsecret secret \\\n    --cleanup \\\n</code></pre> <p>Don't forget to set a proper admin password (use a generator), domain, clientid and clientsecret. The client id and secret can be found on the lifecycle auth server in the configuration for your server. If you don't have permissions to receive this, you can ask the support team to get it for you.</p> <p>Open armadillo in the browser and try to login using basicauth to check if the server is running properly. If it is not running at all, try:</p> <pre><code>systemctl start armadillo\n</code></pre>"},{"location":"pages/install_management/armadillo_migrate_2_to_3/#6-export-data-from-armadillo-2-into-armadillo-3","title":"6. Export data from Armadillo 2 into armadillo 3","text":"<p>Look up the user/password in the application.yml of the old armadillo. They are called MinIO access key and minio secret key.</p> <pre><code>cat /root/armadillo2-backup/application-armadillo2.yml\n</code></pre> <p>Do the following step in a separate screen. On ubuntu use:</p> <pre><code>screen\n</code></pre> <p>Navigate to the armadillo folder:</p> <pre><code>cd /usr/share/armadillo\n</code></pre> <p>This step will copy Armadillo 2 data from minio into the folder matching of an Armadillo 3 data folder:</p> <pre><code>mkdir data\nwget https://raw.githubusercontent.com/molgenis/molgenis-service-armadillo/master/scripts/upgrade/migrate-minio.py\npython3 migrate-minio.py  --minio http://localhost:9000 --target /usr/share/armadillo/data  \n</code></pre> <p>This might take a couple of minutes. You can detach the screen using Ctrl+A followed by D and reattach it using <code>screen -r</code>.</p>"},{"location":"pages/install_management/armadillo_migrate_2_to_3/#7-run-armadillo-3-using-exported-data","title":"7. Run Armadillo 3 using exported data","text":"<p>Make sure to move the exported data into the new 'data' folder. Optionally you might need to fix user permissions, e.g.:</p> <pre><code>chown armadillo:armadillo -R data \n</code></pre> <p>Check if armadillo is running by going to the URL of your server in the browser, login and navigate to the projects tab.</p>"},{"location":"pages/install_management/armadillo_migrate_2_to_3/#8-optionally-acquire-a-permission-set-from-molgenis-team","title":"8. Optionally, acquire a permission set from MOLGENIS team","text":"<p>If you previously ran a central authorisation server with MOLGENIS team, they can provide you with procedure to load pre-existing permissions. They will use:</p> <pre><code>wget https://raw.githubusercontent.com/molgenis/molgenis-service-armadillo/master/scripts/upgrade/migrate-auth.py\npython3 migrate-auth.py  --fusion-auth https://lifecycle-auth.molgenis.org --armadillo https://thearmadillourl.net\n</code></pre> <p>Now check if all users and data are properly migrated.</p> Note <p>If the script fails with a timeout, try pinging the armadillo url and lifecycle auth url to see if they're reachable from the server. In case they are not, you could choose to export the users using the <code>export-users.py</code> script locally and then manually enter them into the system.</p>"},{"location":"pages/install_management/armadillo_migrate_2_to_3/#9-cleanup-ngnix-config","title":"9. Cleanup ngnix config","text":"<p>Change <code>/etc/nginx/sites-available/armadillo.conf</code> to:</p> <pre><code>server {\n  listen 80;\n  server_name urlofyourserver.org\n  include /etc/nginx/global.d/*.conf;\n  location / {\n  proxy_pass http://localhost:8080;\n  client_max_body_size 0;\n  proxy_read_timeout 600s;\n  proxy_redirect http://localhost:8080/ $scheme://$host/;\n  proxy_set_header Host $host;\n  proxy_http_version 1.1;\n  }\n}\n</code></pre> Note <p>Note that the <code>https://</code> is missing in the server_name part.</p> Note <p>If port 443 and the SSL certificates are in the old config, you mind have to keep that part, so you should not comment that out. Keep the listen and certificate lines, comment out the rest and paste the config above below the existing config.</p> <p>Remove the console, auth and storage file from: <code>/etc/nginx/sites-enabled/</code> and <code>/etc/nginx/sites-available/</code>.</p> <pre><code>systemctl restart nginx\n</code></pre>"},{"location":"pages/install_management/armadillo_migrate_2_to_3/#10-fix-applicationyml","title":"10. Fix application.yml","text":"<p>Make sure the following is added:</p> <pre><code>server:\nforward-headers-strategy: framework\n</code></pre>"},{"location":"pages/install_management/armadillo_migrate_2_to_3/#11-fix-urls-in-the-lifecycle-fusionauth","title":"11. Fix URLs in the lifecycle FusionAuth","text":"<p>Add the following to the config of your server: <code>https://yourserver.com/login/oauth2/code/molgenis</code></p>"},{"location":"pages/install_management/armadillo_migrate_2_to_3/#12-set-up-profiles","title":"12. Set up profiles","text":"<p>Login to armadillo in the browser. Navigate to the \"Profiles\" tab. Add a new profile with the following properties:</p> <p>Name: <code>xenon</code> Image: <code>datashield/armadillo-rserver_caravan-xenon:latest</code> Package whitelist: <code>dsBase</code>, <code>resourcer</code>, <code>dsMediation</code>, <code>dsMTLBase</code>, <code>dsSurvival</code>, <code>dsExposome</code></p> <p>Assign a random 9-number seed and create and start the container.</p>"},{"location":"pages/install_management/armadillo_migrate_2_to_3/#13-remove-old-minio-data","title":"13. Remove old MinIO data","text":"<p>First remove the MinIO docker container. First check the name of the container using <code>docker ps -a</code>, then:</p> <pre><code>docker rm containername -f\n</code></pre> <p>After that remove the data:</p> <pre><code>rm -Rf /var/lib/minio/\n</code></pre> Warning <p>Be sure you have migrated your data successfully or created a backup prior to deleting your minio data folder!</p>"},{"location":"pages/install_management/armadillo_migrate_2_to_3/#migrate-projects-and-their-users","title":"Migrate Projects and their users","text":"<p>Migration of just the projects and their users (with their corresponding rights) can be done by using export-users.py and import-users.py.</p> Warning <p>This options does not migrate the data!</p>"},{"location":"pages/install_management/armadillo_migrate_2_to_3/#1-export-projects-and-users-from-armadillo-2","title":"1. Export Projects and users from Armadillo 2","text":"<p>To export users from an Armadillo 2 server, one must use the export-users.py script. <code>export-users.py</code> can be used by using the following arguments:</p> <ul> <li>-f / --fusion-auth (required): The full URL (including http) of the Armadillo 2 server of which you wish to export the Projects and their users from. Please note that <code>export-users.py</code> will prompt to supply the API key for this server once all arguments are valid!</li> <li>-o / --output (required): The output directory in which (unzipped) TSVs will be placed of all projects and their users, with the project name being the TSV name. <code>export-users.py</code> will create a new folder in the supplied output folder named: <code>YYYY-MM-DD</code>, where <code>YYYY</code> is the current year, <code>MM</code> is the current month and <code>DD</code> is the current day.</li> </ul> <p>Again, note that <code>export-users.py</code> will prompt to supply the API key for the <code>-f / --fusion-auth</code> server once all arguments are valid!</p> <p>Empty projects (without users) will also be exported as an empty TSV (containing only the header). This is a feature that <code>import-users.py</code>, the next step, is able to function with.</p> <p>Also note that some projects might change in name, as Armadillo 3 is stricter with naming projects.</p> <p>Example:</p> <pre><code>pipenv shell\npython3 export-users.py -f https://armadillo2-server.org -o ./armadillo_2_exports\n</code></pre>"},{"location":"pages/install_management/armadillo_migrate_2_to_3/#2-import-projects-and-users-tsvs-into-armadillo-3","title":"2. Import Projects and users TSVs into Armadillo 3","text":"<p>To import users into an Armadillo 3 server, one must use the import-users.py script. <code>import-users</code> can be used by using the following arguments:</p> <ul> <li>-s / --server (required): The full URL (including http) of the Armadillo 3 server of which you wish to import the Projects and their users TSVs in step 1. Please note that <code>import-users.py</code> will prompt to supply the API key for this server once all arguments are valid!</li> <li>-d / --user-data (required): The directory, including the folder named after the year-month-day combination, where the export TSVs from step 1 are stored.</li> </ul> <p>Again, note that <code>import-users.py</code> will prompt to supply the API key for the <code>-s / --server</code> server once all arguments are valid!</p> <p>Empty TSVs from step 1 will be imported as empty projects with no users.</p> <p>Example:</p> <pre><code>pipenv shell\npython3 import-users.py -s https://armadillo3-server.org -d ./armadillo_2_exports/2023-11-09\n</code></pre>"},{"location":"pages/install_management/armadillo_migrate_3_to_4/","title":"Migrate Armadillo 3 to Armadillo 4","text":"<p>Upgrade to Armadillo 4 (rock only)</p> Note <p>We assume Ubuntu with systemd is used.</p> <p>The upgrade from Armadillo v3.4 to 4.x is breaking as the profiles must be Rock profiles.</p> <p>Additionally, when working with an armadillo 4 instance, researchers should update <code>DSMolgenisArmadillo</code> to version 2.0.5 (this version is compatible with armadillo 3 as well).</p>"},{"location":"pages/install_management/armadillo_migrate_3_to_4/#get-latest-version","title":"Get latest version","text":"<p>For the latest 4.x release check https://github.com/molgenis/molgenis-service-armadillo/releases/latest. This will redirect to a v4.x.y page.</p> <p>Make a note of the version as you will use this below.</p>"},{"location":"pages/install_management/armadillo_migrate_3_to_4/#1-check-your-profile-types","title":"1. Check your profile types","text":"<p>Check if the new profiles are compatible with your needs, these profile names can be edited later on in the manual:</p> <pre><code>- datashield/rock-base:latest\n- datashield/rock-dolomite-xenon:latest\n</code></pre> <p>See also DataSHIELD profiles</p>"},{"location":"pages/install_management/armadillo_migrate_3_to_4/#2-check-server-space","title":"2. Check server space","text":"<p>Make sure enough disk space is available for the Rock only images.</p>"},{"location":"pages/install_management/armadillo_migrate_3_to_4/#21-check-disk-space","title":"2.1 Check disk space","text":"<pre><code># Check disk space\ndf -H\n</code></pre> <p>If you have 15 GB or more available, you can continue. If you have less available, check <code>docker image list</code> to see if you can cleanup some docker images (you only need the latest <code>datashield/armadillo-rserver</code> and <code>datashield/armadillo-rserver_caravan-xenon</code> for armadillo 3).</p>"},{"location":"pages/install_management/armadillo_migrate_3_to_4/#22-check-docker-images","title":"2.2 Check docker images","text":"<p>First stop all profiles through the Armadillo UI.</p> <p>Now that the profiles are not running you can delete the old versions of their docker images.</p> <p>The command are indicative so change as needed.</p> <pre><code># should return empty list (i.e. default, xenon, rock)\ndocker container list\n\n# remove containers not needed\ndocker container stop &lt;id&gt;\ndocker container rm &lt;id&gt;\n\n# remove unneeded images/profiles (ie. caravan, ...)\ndocker image list\ndocker image rm &lt;id&gt;\n</code></pre> <p>If possible download the new images from shell using <code>docker pull</code> beforehand (for minimum downtime):</p> <pre><code>docker pull datashield/rock-base:latest\ndocker pull datashield/rock-dolomite-xenon:latest\n</code></pre> <p>Check disk space again.</p> <pre><code># Check disk space\ndf -H\n</code></pre>"},{"location":"pages/install_management/armadillo_migrate_3_to_4/#3-download-required-files","title":"3. Download required files","text":"<p>Make a note of the version number ie. <code>v4.1.3</code> as you need to download some files from the terminal using the update script.</p>"},{"location":"pages/install_management/armadillo_migrate_3_to_4/#31-update-script","title":"3.1 Update script","text":"<p>You need to be root user.</p> <pre><code>cd /root\n# Change the versions number v4.x.y\nmkdir v4.x.y\ncd v4.x.y\n\n# Check directory location\npwd\n</code></pre> <pre><code># Change the version number v4.x.y then run command\nwget https://raw.githubusercontent.com/molgenis/molgenis-service-armadillo/v4.x.y/scripts/install/armadillo-check-update.sh\n</code></pre> <p>Make the script runnable <pre><code>chmod u+x armadillo-check-update.sh\n</code></pre></p>"},{"location":"pages/install_management/armadillo_migrate_3_to_4/#32-run-update-script","title":"3.2 Run update script","text":"<p>You can run the following script to download the new Armadillo version.</p> Note <p>The output could help us to help you fix problems.</p> <pre><code># Change the version number v4.x.y\n./armadillo-check-update.sh 4.x.y\n</code></pre> <p>Once the script has completed, you can verify that the Armadillo JAR file has been downloaded by checking the directory:</p> <pre><code># See all jar files on your system\nls -ltr /usr/share/armadillo/application/\n</code></pre>"},{"location":"pages/install_management/armadillo_migrate_3_to_4/#4-config-the-new-version","title":"4. Config the new version","text":""},{"location":"pages/install_management/armadillo_migrate_3_to_4/#41-applicationyml","title":"4.1 application.yml","text":"<p>To compare the latest template to your own configuration, see the troubleshooting section below. The safest way to update armadillo is by fetching the template and filling it in with your configuration using the information in the troubleshooting section. You can try the following first:</p> <p>Edit the application.yml:</p> <pre><code>nano /etc/armadillo/application.yml\n</code></pre> <p>Below the line <code>docker-management-enabled: true</code>, ensure to insert the line <code>docker-run-in-container: false</code>. Typically, you'll find these configurations at the beginning of the file.</p>"},{"location":"pages/install_management/armadillo_migrate_3_to_4/#42-make-backup-of-system-config","title":"4.2 Make backup of system config","text":"<pre><code># Still in the correct directory? (`/root/v4.x.y`)\npwd\n</code></pre> <p>We make a backup into the same <code>v4.x.y</code> directory but that is not strictly needed.</p> <pre><code>cp -r /usr/share/armadillo/data/system ./\n</code></pre> <p>should result in:</p> <pre><code>ls system/\n# access.json  profiles.json\n</code></pre>"},{"location":"pages/install_management/armadillo_migrate_3_to_4/#5-restart-application-using-new-version","title":"5. Restart application using new version","text":"<p>Armadillo has not yet been updated, follow the following steps to do so:</p>"},{"location":"pages/install_management/armadillo_migrate_3_to_4/#51-stop-armadillo","title":"5.1 Stop Armadillo","text":"<pre><code>systemctl stop armadillo\n</code></pre>"},{"location":"pages/install_management/armadillo_migrate_3_to_4/#52-link-new-version","title":"5.2 Link new version","text":"<pre><code># List application files\nls -l /usr/share/armadillo/application/\n\n# Remove the linked file\nrm /usr/share/armadillo/application/armadillo.jar\n\n# Attach new linked file and dont forget to change the version number v4.x.y\nln -s /usr/share/armadillo/application/armadillo-4.x.y.jar /usr/share/armadillo/application/armadillo.jar\n\n# Check result\nls -l /usr/share/armadillo/application/\n</code></pre>"},{"location":"pages/install_management/armadillo_migrate_3_to_4/#53-restart-armadillo","title":"5.3 Restart Armadillo","text":"<pre><code>systemctl start armadillo\nsystemctl status armadillo\n</code></pre>"},{"location":"pages/install_management/armadillo_migrate_3_to_4/#6-log-on-to-the-ui","title":"6. Log on to the UI","text":"<p>Go to your armadillo website. Is the version in the left top corner updated? This means the update was successful.</p>"},{"location":"pages/install_management/armadillo_migrate_3_to_4/#7-update-profiles","title":"7. Update profiles","text":"<p>Login into the website and go to the profiles tab. Here two profiles should be listed: <code>default</code> and <code>xenon</code>. Any other profiles can be removed.</p> <ol> <li>Edit the default profile.</li> <li>Change the \"image\" to <code>datashield/rock-base:latest</code> and save.</li> <li>Start the default profile.</li> <li>Edit the \"xenon\" profile.</li> <li>Change the \"image\" to <code>datashield/rock-dolomite-xenon:latest</code> and save.</li> <li>Start the xenon profile.</li> </ol> <p>Everything should now be working correctly. You can try and login to your server via the central analysis server, using the <code>DSMolgenisArmadillo</code> (2.0.5 or up) package to test.</p>"},{"location":"pages/install_management/armadillo_migrate_3_to_4/#troubleshooting","title":"Troubleshooting","text":""},{"location":"pages/install_management/armadillo_migrate_3_to_4/#logs","title":"Logs","text":"<p>Reviewing the log files can provide valuable insights into any issues or activities within the application. If you encounter any errors or unexpected behavior, examining the log files can often help diagnose the problem.</p> <p>Check log files location</p> <pre><code>ls -l /var/log/armadillo/\n</code></pre> <p>should look something like:</p> <pre><code>-rw-r--r-- 1 root      root      111224 Jan 30 11:47 armadillo.log\n-rw-r--r-- 1 armadillo armadillo  68872 Jan 30 11:47 audit.log\n-rw-r--r-- 1 root      root        8428 Dec 19 11:57 error.log\n</code></pre> <p>If the <code>error.log</code> data/time is around current day/time you have to check this file.</p> <pre><code># See last 100 lines\ntail -n 100 /var/log/armadillo/error.log\n</code></pre> <p>Otherwise, you can look into <code>armadillo.log</code>:</p> <pre><code># See last 100 lines\ntail -n 100 /var/log/armadillo/armadillo.log\n</code></pre> <p>or</p> <pre><code># Follow all files for changes (keep open to see activities)\ntail -f /var/log/armadillo/*\n</code></pre>"},{"location":"pages/install_management/armadillo_migrate_3_to_4/#compare-applicationyml","title":"Compare application.yml","text":"<p>Although we try to be very complete in this manual, if you run into issues, it might be because a setting was changed in the application.yml. You can check if application settings has any new entries by first downloading the application template (for reference).</p> <pre><code># Change the version number v4.x.y\nwget https://raw.githubusercontent.com/molgenis/molgenis-service-armadillo/v4.x.y/application.template.yml\n</code></pre> <p>To see the difference run:</p> <pre><code>diff --side-by-side /etc/armadillo/application.yml application.template.yml\n</code></pre> <p>Your output should look like output below.</p> <ul> <li>Left side column is your settings.</li> <li>Right side column is our expected settings.</li> <li>In the middle some symbols may occur:</li> <li>the <code>&amp;lt;</code> means only your settings</li> <li>the <code>&amp;gt;</code> means we have a setting (probably added or options)</li> <li>the <code>|</code> means both have different values which happens with OICD/oauth settings for sure.</li> </ul> <pre><code>armadillo:                            armadillo:\n  # set this false if you DON'T want Armadillo to create/edit      # set this false if you DON'T want Armadillo to create/edit\n  docker-management-enabled: true                  docker-management-enabled: true\n....\naudit:                                  &lt;\n  log:                                  &lt;\n    path: /var/log/armadillo/audit.log  &lt;\n                                        &lt;\n....\n\nstorage:                                         storage:\n  ## to change location of the data storage        ## to change location of the data storage\n  root-dir: /usr/share/armadillo/data           |  root-dir: data\n</code></pre> <p>Making changes may be a little tricky. You can backup</p> <pre><code>cp /etc/armadillo/application.yml ./\n# list files\nls .\n</code></pre> <p>then edit</p> <pre><code>nano /etc/armadillo/application.yml\n</code></pre>"},{"location":"pages/install_management/armadillo_migrate_4_to_5/","title":"Migrate Armadillo 4 to Armadillo 5","text":"<p>MOLGENIS Armadillo v5.x.y depends on Java 21, support for all older versions of Java are dropped, so if your Armadillo instance is not running on Java 21 yet, you'll have to update. To do so:</p>"},{"location":"pages/install_management/armadillo_migrate_4_to_5/#1-get-the-update-script","title":"1. Get the update script","text":"<pre><code>cd /root\n# Change the versions number v5.x.y\nmkdir v5.x.y\ncd v5.x.y\n</code></pre> <pre><code># Change the version number v5.x.y then run command\nwget https://raw.githubusercontent.com/molgenis/molgenis-service-armadillo/v5.x.y/scripts/install/armadillo-check-update.sh\n</code></pre> <p>Make the script runnable <pre><code>chmod u+x armadillo-check-update.sh\n</code></pre></p>"},{"location":"pages/install_management/armadillo_migrate_4_to_5/#2-run-the-update-script","title":"2. Run the update script","text":"<pre><code># Change the version number v5.x.y\n./armadillo-check-update.sh 5.x.y\n</code></pre> <p>Once the script has completed, you can verify that the Armadillo JAR file has been downloaded by checking the directory:</p> <pre><code># See all jar files on your system\nls -ltr /usr/share/armadillo/application/\n</code></pre>"},{"location":"pages/install_management/armadillo_migrate_4_to_5/#3-make-backup-of-system-config","title":"3. Make backup of system config","text":"<pre><code># Still in the correct directory? (`/root/v5.x.y`)\npwd\n</code></pre> <p>We make a backup into the same <code>v5x.y</code> directory but that is not strictly needed.</p> <pre><code>cp -r /usr/share/armadillo/data/system ./\n</code></pre> <pre><code>ls system/\n# access.json  profiles.json\n</code></pre>"},{"location":"pages/install_management/armadillo_migrate_4_to_5/#4-stop-armadillo","title":"4. Stop Armadillo","text":"<pre><code>systemctl stop armadillo\n</code></pre>"},{"location":"pages/install_management/armadillo_migrate_4_to_5/#5-update-java","title":"5. Update Java","text":"<pre><code>apt update\napt install openjdk-21-jre-headless\n</code></pre>"},{"location":"pages/install_management/armadillo_migrate_4_to_5/#6-link-new-version","title":"6. Link new version","text":"<pre><code># List application files\nls -l /usr/share/armadillo/application/\n\n# Remove the linked file\nrm /usr/share/armadillo/application/armadillo.jar\n\n# Attach new linked file and dont forget to change the version number v5.x.y\nln -s /usr/share/armadillo/application/armadillo-5.x.y.jar /usr/share/armadillo/application/armadillo.jar\n\n# Check result\nls -l /usr/share/armadillo/application/\n</code></pre>"},{"location":"pages/install_management/armadillo_migrate_4_to_5/#7-restart-armadillo","title":"7 Restart Armadillo","text":"<pre><code>systemctl start armadillo\nsystemctl status armadillo\n</code></pre>"},{"location":"pages/install_management/armadillo_minor_release_update/","title":"Armadillo minor release update","text":""},{"location":"pages/install_management/armadillo_minor_release_update/#minor-version-upgrade-manual-procedures-for-yz-releases","title":"Minor Version Upgrade Manual: Procedures for y.z Releases","text":"Note <p>This manual is intended for minor version updates within the latest major release. For example, you can use it to update from version 4.1 to 4.7.1. For upgrading to a new major version, please refer to the specific manuals dedicated to major version upgrades.</p>"},{"location":"pages/install_management/armadillo_minor_release_update/#check-latest-version","title":"Check latest version","text":"<p>For the latest 4.y.z release check https://github.com/molgenis/molgenis-service-armadillo/releases/latest. This will redirect to a v4.y.z page.</p>"},{"location":"pages/install_management/armadillo_minor_release_update/#updating-armadillo","title":"Updating Armadillo","text":""},{"location":"pages/install_management/armadillo_minor_release_update/#1-stop-docker-containers","title":"1. Stop docker containers","text":"<p>First, log in to the Armadillo UI and navigate to the Profiles tab. Now, click 'Stop' for each profile listed.</p> <p>Next, stop any unnecessary containers.</p> <p>The commands provided are indicative, so adjust them as needed.</p> <pre><code># should return empty list (i.e. default, xenon, rock)\ndocker container list\n\n# remove containers not needed\ndocker container stop &lt;id&gt;\n</code></pre>"},{"location":"pages/install_management/armadillo_minor_release_update/#2-download-required-files","title":"2. Download required files","text":"<p>Make a note of the version number ie. <code>v4.7.1</code> as you need to download some files from the terminal using the update script.</p>"},{"location":"pages/install_management/armadillo_minor_release_update/#21-update-script","title":"2.1 Update script","text":"<p>You need to be root user.</p> <pre><code>cd /root\n\n# Make sure to change the versions number v4.y.z\nmkdir v4.y.z\ncd v4.y.z\n\n# Check directory location\npwd\n</code></pre> <pre><code># Change the version number v4.y.z then run command\nwget https://raw.githubusercontent.com/molgenis/molgenis-service-armadillo/v4.y.z/scripts/install/armadillo-check-update.sh\n</code></pre> <p>Make the script executable:</p> <pre><code>chmod u+x armadillo-check-update.sh\n</code></pre>"},{"location":"pages/install_management/armadillo_minor_release_update/#22-run-update-script","title":"2.2 Run update script","text":"<p>You can run the following script to download the new Armadillo version.</p> Tip <p>The output could help us to help you fix problems.</p> <pre><code># Change the version number v4.y.z\n./armadillo-check-update.sh 4.y.z\n</code></pre> <p>Once the script has completed, you can verify that the Armadillo JAR file has been downloaded by checking the directory:</p> <pre><code># See all jar files on your system\nls -ltr /usr/share/armadillo/application/\n</code></pre>"},{"location":"pages/install_management/armadillo_minor_release_update/#3-make-backup-of-system-config","title":"3. Make backup of system config","text":"<pre><code># Still in the correct directory? (`/root/v4.y.z`)\npwd\n</code></pre> <p>We make a backup into the same <code>v4.y.z</code> directory but that is not strictly needed.</p> <pre><code>cp -r /usr/share/armadillo/data/system ./\n</code></pre> <p>should result in:</p> <pre><code>ls system/\n# access.json  profiles.json\n</code></pre>"},{"location":"pages/install_management/armadillo_minor_release_update/#4-restart-application-using-new-version","title":"4. Restart application using new version","text":"<p>Armadillo has not yet been updated, follow the following steps to do so:</p>"},{"location":"pages/install_management/armadillo_minor_release_update/#41-stop-armadillo","title":"4.1 Stop Armadillo","text":"<pre><code>systemctl stop armadillo\n</code></pre>"},{"location":"pages/install_management/armadillo_minor_release_update/#42-link-new-version","title":"4.2 Link new version","text":"<pre><code># List application files\nls -l /usr/share/armadillo/application/\n\n# Remove the linked file\nrm /usr/share/armadillo/application/armadillo.jar\n\n# Attach new linked file and dont forget to change the version number v4.y.z\nln -s /usr/share/armadillo/application/armadillo-4.y.z.jar /usr/share/armadillo/application/armadillo.jar\n\n# Check result\nls -l /usr/share/armadillo/application/\n</code></pre>"},{"location":"pages/install_management/armadillo_minor_release_update/#43-restart-armadillo","title":"4.3 Restart Armadillo","text":"<pre><code>systemctl start armadillo\nsystemctl status armadillo\n</code></pre>"},{"location":"pages/install_management/armadillo_minor_release_update/#5-log-on-to-the-ui","title":"5. Log on to the UI","text":"<p>Go to your armadillo website. Is the version in the left top corner updated? This means the update was successful.</p>"},{"location":"pages/install_management/armadillo_minor_release_update/#6-start-profiles","title":"6. Start profiles","text":"<p>Login into the website and go to the profiles tab. Now you can start all the profiles again.</p> <p>Everything should now be working correctly. You can try and login to your server via the central analysis server, using the <code>DSMolgenisArmadillo</code> (2.0.5 or up) package to test.</p>"}]}